#!/bin/bash

CHARM="openstack-dashboard"

PACKAGES="openstack-dashboard openstack-dashboard-ubuntu-theme python-keystoneclient python-memcache memcached haproxy"
LOCAL_SETTINGS="/etc/openstack-dashboard/local_settings.py"

if [[ -e "$CHARM_DIR/lib/openstack-common" ]] ; then
  . $CHARM_DIR/lib/openstack-common
else
  juju-log "ERROR: Couldn't load $CHARM_DIR/lib/openstack-common." && exit 1
fi

set_or_update() {
  # set a key = value option in $LOCAL_SETTINGS
  local key=$1 value=$2
  [[ -z "$key" ]] || [[ -z "$value" ]] &&
    juju-log "$CHARM set_or_update: ERROR - missing parameters" && return 1
  grep -q "^$key = \"$value\"" "$LOCAL_SETTINGS" &&
    juju-log "$CHARM set_or_update: $key = $value already set" && return 0
  if grep -q "^$key = " "$LOCAL_SETTINGS" ; then
    juju-log "$CHARM set_or_update: Setting $key = $value"
    cp "$LOCAL_SETTINGS" /etc/openstack-dashboard/local_settings.last
    sed -i "s|\(^$key = \).*|\1\"$value\"|g" "$LOCAL_SETTINGS" || return 1
  else
    juju-log "$CHARM set_or_update: Adding $key = $value"
    echo "$key = \"$value\"" >>$LOCAL_SETTINGS || return 1
  fi
  return 0
}

do_openstack_upgrade() {
  local rel="$1"
  shift
  local packages=$@

  # Setup apt repository access and kick off the actual package upgrade.
  configure_install_source "$rel"
  apt-get update
  DEBIAN_FRONTEND=noninteractive apt-get --option Dpkg::Options::=--force-confnew -y \
     install $packages

  # Configure new config files for access to keystone, if a relation exists.
  r_id=$(relation-ids identity-service | head -n1)
  if [[ -n "$r_id" ]] ; then
    export JUJU_REMOTE_UNIT=$(relation-list -r $r_id | head -n1)
    export JUJU_RELATION="identity-service"
    export JUJU_RELATION_ID="$r_id"
    local service_host=$(relation-get -r $r_id service_host)
    local service_port=$(relation-get -r $r_id service_port)
    if [[ -n "$service_host" ]] && [[ -n "$service_port" ]] ; then
      service_url="http://$service_host:$service_port/v2.0"
      set_or_update OPENSTACK_KEYSTONE_URL "$service_url"
    fi
  fi
}

configure_apache() {
  local listen_port=$1
  if [ -z "$listen_port" ]; then
    echo "Please provider a port to reconfigure to".
    exit 1
  fi
  # Reconfigure to listen on provided port
  sed -i -e "s/^NameVirtualHost.*/NameVirtualHost *:$listen_port/g" \
         -e "s/^Listen.*/Listen $listen_port/g" \
         /etc/apache2/ports.conf
}
